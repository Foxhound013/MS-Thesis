library(lattice)
library(tidyverse)
library(rNOMADS)
library(sp)
library(raster)
library(lattice)
library(tidyverse)
library(rNOMADS)
library(sp)
library(raster)
fpath <- './asos_april-july_2018.csv'
col_names = c('station', 'valid_utc', 'lon', 'lat', 'tmpc', 'dwptc', 'relh',
'drctn', 'spd', 'precip_1hr_mm', 'vis', 'gust_mph', 'wxcodes')
asos <- read.csv(fpath, header=TRUE, stringsAsFactors = FALSE, col.names=col_names,
na.strings=c('M', '#NAME?', 'T'))
asos$valid_utc <- as.POSIXct(asos$valid_utc, format="%m/%d/%Y %H:%M", tz="UTC")
# what is structure and summary of the data
str(asos)
summary(asos)
# How about missingness? How much of the data is missing for visibility?
vis.missing = (sum(is.na(asos$vis))/length(asos$vis)) * 100
# missingness of tmp?
tmpc.missing = (sum(is.na(asos$tmpc))/length(asos$tmpc)) * 100
# missingness of dpt?
dwptc.missing = (sum(is.na(asos$dwptc))/length(asos$dwptc)) * 100
# missingness of wind speed
spd.missing = (sum(is.na(asos$spd))/length(asos$spd)) * 100
# missingness of wind direction
drctn.missing = (sum(is.na(asos$drctn))/length(asos$drctn)) * 100
# missingness of precip
precip.missing = (sum(is.na(asos$precip_1hr_mm))/length(asos$precip_1hr_mm)) * 100
# gust mph
gust.missing = (sum(is.na(asos$gust_mph))/length(asos$gust_mph)) * 100
# wx codes
wxcodes.missing = (sum(is.na(asos$wxcodes))/length(asos$wxcodes)) * 100
missing_df = data.frame(vis.missing, tmpc.missing, dwptc.missing, dwptc.missing,
spd.missing, drctn.missing, gust.missing, precip.missing, wxcodes.missing)
asos_sub = asos[,c('station', 'valid_utc', 'lat', 'lon', 'vis', 'spd', 'drctn')]
# There is some strange values in the spd and and vis vars
asos_sub = asos_sub[which(asos_sub$vis <= 20),]
asos_sub = asos_sub[which(asos_sub$spd <= 75),]
summary(asos_sub)
asos_sub$hour <- sapply(asos_sub$valid_utc, strftime, format='%H', tz='UTC')
# most of the histograms look quite similar with the exception of PLD, HLB, and AID.
# Let's take a closer look at IND only.
ind <- asos_sub[which(asos_sub$station == 'IND'),]
# what if I condition this on hour of day? Maybe split out the datetime column into hour and day?
ind$hour <- sapply(ind$valid_utc, strftime, format='%H', tz='UTC')
lattice::densityplot(~vis | factor(hour), data=asos_sub)
library(lattice)
library(tidyverse)
library(rNOMADS)
library(sp)
library(raster)
library(fields)
library(fields)
fpath <- 'C:/Users/Downi/Google Drive/Research/Thesis/wx_data/asos_april-july_2018.csv'
col_names = c('station', 'valid_utc', 'lon', 'lat', 'tmpc', 'dwptc', 'relh',
'drctn', 'spd', 'precip_1hr_mm', 'vis', 'gust_mph', 'wxcodes')
asos <- read.csv(fpath, header=TRUE, stringsAsFactors = FALSE, col.names=col_names,
na.strings=c('M', '#NAME?', 'T'))
asos$valid_utc <- as.POSIXct(asos$valid_utc, format="%m/%d/%Y %H:%M", tz="UTC")
asos_sub = asos[,c('station', 'valid_utc', 'lat', 'lon', 'vis', 'spd', 'drctn')]
# There is some strange values in the spd and and vis vars
asos_sub = asos_sub[which(asos_sub$vis <= 20),]
asos_sub = asos_sub[which(asos_sub$spd <= 75),]
# most of the histograms look quite similar with the exception of PLD, HLB, and AID.
# Let's take a closer look at IND only.
ind <- asos_sub[which(asos_sub$station == 'IND'),]
# what if I condition this on hour of day? Maybe split out the datetime column into hour and day?
ind$hour <- sapply(ind$valid_utc, strftime, format='%H', tz='UTC')
asos_sub$hour <- sapply(asos_sub$valid_utc, strftime, format='%H', tz='UTC')
# find the unique lat and lon
unique(asos_sub$station)
# find the unique lat and lon
asos_sub[unique(asos_sub$station), c('lon','lat')]
asos_sub[unique(asos_sub$station),]
asos_sub[,unique(asos_sub$station)]
# find the unique lat and lon
asos_sub[which(asos_sub$station == unique(asos_sub$station)), c('lon','lat')]
which(asos_sub$station == unique(asos_sub$station))
asos_sub[which(asos_sub$station == unique(asos_sub$station)),]
unique(asos_sub$station)
locations <- data.frame(cbind(asos_sub$station, asos_sub$lat, asos_sub$lon), row.names=c('station','lat','lon'))
locations <- data.frame(cbind(asos_sub$station, asos_sub$lat, asos_sub$lon), col.names=c('station','lat','lon'))
locations <- data.frame(cbind(asos_sub$station, asos_sub$lat, asos_sub$lon))
View(locations)
names(locations) <- c('station','lat','lon')
unique(locations)
locations <- unique(locations)
View(locations)
rownames(locations) <- seq(1,length(locations))
seq(1,length(locations))
View(locations)
rownames(locations) <- seq(1,length(locations$station))
