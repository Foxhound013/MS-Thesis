pdf('./figures/orderedSegments_N_Tseries.pdf', width=16)
xyplot(speed~tstamp | factor(position), data=traffic.n, type='l', col='deepskyblue3',
layout=c(1,6), ylim=c(0,90), scales=list(y=list(at=seq(0,90,15))))
dev.off()
end <- Sys.time()
end-start
library(data.table)
library(sf)
library(tmap); tmap_mode('view')
library(mapview)
library(dplyr)
library(tidyr)
library(lattice)
fpath <- 'C:/Users/Downi/Desktop/June2018_I65_SpeedData.csv'
traffic <- fread(fpath,col.names=c('xdid', 'tstamp', 'speed', 'score', 'lat', 'lon', 'position',
'roadname', 'direction', 'bearing', 'startmm', 'endmm'))
glimpse(traffic)
uniqueSegs <- traffic[,c('xdid','position','lon','lat')] %>% unique %>% st_as_sf(coords=c('lon','lat'))
#tmap_mode('view')
#tm_shape(uniqueSegs) + tm_dots()
# fix up the data
traffic$tstamp <- as.POSIXct(traffic$tstamp, tz='UTC')
traffic <- setDT(traffic)
traffic.n <- traffic[which(direction=='N'),]
traffic.n <- traffic.n[order(tstamp),]
traffic.n$position <- as.factor(traffic.n$position)
traffic.s <- traffic[which(direction=='S'),]
traffic.s <- traffic.s[order(tstamp),]
traffic.s$position <- as.factor(traffic.s$position)
##### Correlation of One Segment #####
oneSeg <- traffic.n[which(position==250),] # Should be between Indy and Lafayette
##### Correlation of One Segment #####
oneSeg.n <- traffic.n[which(position==250),] # Should be between Indy and Lafayette
rm(oneSeg)
tmp <- traffic.n[,list(count=mean(speed)), by=cut(tstamp, '15 min')]
View(tmp)
tmp <- traffic.n[,list(xdid=xdid, speed=mean(speed)), by=list(tstamp=as.POSIXct(cut(tstamp, '15 min'),tz='UTC'))]
View(tmp)
View(tmp)
tmp <- oneSeg.n[,list(speed=mean(speed), lat=lat, lon=lon), by=list(xdid=xdid, position=position, tstamp=as.POSIXct(cut(tstamp, '15 min'),tz='UTC'))]
View(tmp)
tmp <- OneSeg.n[,list(xdid=xdid, speed=mean(speed), position=position),
by=list(tstamp=as.POSIXct(cut(tstamp, '15 min'),tz='UTC'))]
tmp <- oneSeg.n[,list(xdid=xdid, speed=mean(speed), position=position),
by=list(tstamp=as.POSIXct(cut(tstamp, '15 min'),tz='UTC'))]
View(tmp)
tmp <- oneSeg.n[,list(speed=mean(speed)),
by=list(xdid=xdid, position=position, tstamp=as.POSIXct(cut(tstamp, '15 min'),tz='UTC'))]
View(tmp)
# if you take all of the meta info that repeats and put it in the by argument, it'll only occur once.
tmp <- oneSeg.n[,list(speed=mean(speed)),
by=list(xdid=xdid,
position=position,
tstamp=as.POSIXct(cut(tstamp, '15 min'),tz='UTC')
lat=lat,
lon=lon,
roadname=roadname,
direction=direction,
bearing=bearing)]
# if you take all of the meta info that repeats and put it in the by argument, it'll only occur once.
tmp <- oneSeg.n[,list(speed=mean(speed)),
by=list(xdid=xdid,
position=position,
tstamp=as.POSIXct(cut(tstamp, '15 min'),tz='UTC'),
lat=lat,
lon=lon,
roadname=roadname,
direction=direction,
bearing=bearing)]
# if you take all of the meta info that repeats and put it in the by argument, it'll only occur once.
tmp <- traffic.n[,list(speed=mean(speed)),
by=list(xdid=xdid,
position=position,
tstamp=as.POSIXct(cut(tstamp, '15 min'),tz='UTC'),
lat=lat,
lon=lon,
roadname=roadname,
direction=direction,
bearing=bearing)]
View(tmp)
length(unique(tmp$xdid))
length(unique(traffic.n$xdid))
# if you take all of the meta info that repeats and put it in the by argument, it'll only occur once.
traffic15.n <- traffic.n[,list(speed=mean(speed)),
by=list(xdid=xdid,
position=position,
tstamp=as.POSIXct(cut(tstamp, '15 min'),tz='UTC'),
lat=lat,
lon=lon,
roadname=roadname,
direction=direction,
bearing=bearing)]
length(unique(traffic15.n$xdid))
length(unique(traffic.n$xdid))
rm(tmp)
View(traffic15.n)
levels(traffic15.n)
levels(traffic15.n$position)
start <- Sys.time()
pdf('./figures/orderedSegments_N_15Tseries.pdf', width=16)
xyplot(speed~tstamp | factor(position), data=traffic15.n, type='l', col='deepskyblue3',
layout=c(1,6), ylim=c(0,90), scales=list(y=list(at=seq(0,90,15))))
dev.off(); end <- Sys.time(); end-start
##### Correlation of One Segment #####
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
View(oneSeg.n)
# carry out a correlation analysis over time with this one segment.
cor(oneSeg.n$tstamp, oneSeg.n$speed)
# carry out a correlation analysis over time with this one segment.
cor(as.integer(oneSeg.n$tstamp), oneSeg.n$speed)
?acf
acf(oneSeg.n)
xyplot(speed~tstamp, OneSeg.n)
xyplot(speed~tstamp, oneSeg.n)
xyplot(speed~tstamp, oneSeg.n, type='l')
# test for stationarity
acf(oneSeg.n)
?acf
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic15.n[which(position==250),] %>% ts# Should be between Indy and Lafayette
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
library(zoo)
?as.ts
# convert to a time series object
as.ts(oneSeg.n, start=oneSeg.n$tstamp[1], end=oneSeg.n$tstamp[length(oneSeg.n$tstamp)])
View(oneSeg.n)
# convert to a time series object
zoo(oneSeg.n, order.by=tstamp)
# convert to a time series object
zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
# convert to a time series object
tmp <- zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
summary(tmp)
# test for stationarity
acf(oneSeg.n)
anyNA(oneSeg.n)
# test for stationarity
decompose(oneSeg.n)
acf(oneSeg.n)
acf(oneSeg.n$speed)
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
# test for stationarity
acf(oneSeg.n$speed)
# convert to a zoo time series object
oneSeg.n <- zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
# test for stationarity
acf(oneSeg.n$speed)
# test for stationarity
acf(oneSeg.n$speed)
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# convert to a zoo time series object
oneSeg.n <- zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
xyplot(speed~tstamp, oneSeg.n, type='l')
# test for stationarity
acf(oneSeg.n$speed)
oneSeg.n
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# test for stationarity
acf(oneSeg.n$speed)
# convert to a zoo time series object
oneSeg.n <- zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
oneSeg.n$speed
summary(oneSeg.n)
# test for stationarity
acf(oneSeg.n$speed)
plot(oneSeg.n$speed)
plot(oneSeg.n)
class(oneSeg.n)
# test for stationarity
acf(oneSeg.n$speed)
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic.n[which(position==250),] # Should be between Indy and Lafayette
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# look at 15 minute data
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# look at 15 minute data
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
ccf(oneSeg.n$speed)
ccf(as.integer(oneSeg.n$tstamp), oneSeg.n$speed)
ccf(as.integer(oneSeg.n$direction), oneSeg.n$speed)
ccf(as.integer(oneSeg.n$lat), oneSeg.n$speed)
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# convert to a zoo time series object
#oneSeg.n <- zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
# test for stationarity
acf(oneSeg.n$speed)
# test for stationarity
acf(oneSeg.n$speed, type='correlation')
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
# test for stationarity
acf(oneSeg.n$speed)
# convert to a zoo time series object
oneSeg.n <- zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
# look at 15 minute data
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# convert to a zoo time series object
oneSeg.n <- zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
plot.ts(oneSeg.n$tstamp, oneSeg.n$speed)
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
class(oneSeg.n$speed)
# look at 15 minute data
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
xyplot(speed~tstamp, oneSeg.n, type='l')
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
hist(oneSeg.n$speed)
arima(oneSeg.n$speed)
arima.sim(oneSeg.n$speed)
twoSeg.n <- traffic15.n[which(position==251),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic.n[which(position==251),]
##### Time Series Analytics of One Segment #####
oneSeg.n <- traffic.n[which(position==250),] # Should be between Indy and Lafayette
twoSeg.n <- traffic.n[which(position==251),]
xyplot(speed~tstamp, oneSeg.n, type='l')
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
ccf(oneSeg.n$speed, twoSeg.n$speed)
# look at 15 minute data
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
?ccf
# look at 15 minute data
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
twoSeg.n <- traffic15.n[which(position==255),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic15.n[which(position==254),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic15.n[which(position==253),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic15.n[which(position==252),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic15.n[which(position==280),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic15.n[which(position==350),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic15.n[which(position==2),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic15.n[which(position==251),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
twoSeg.n <- traffic15.n[which(position==251),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic.n[which(position==351),]
oneSeg.n <- traffic.n[which(position==250),] # Should be between Indy and Lafayette
twoSeg.n <- traffic.n[which(position==351),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic.n[which(position==2),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic.n[which(position==251),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic.n[which(position==255),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic.n[which(position==260),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic.n[which(position==270),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
twoSeg.n <- traffic.n[which(position==251),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
twoSeg.n <- traffic15.n[which(position==251),]
xyplot(speed~tstamp, oneSeg.n, type='l')
# convert to a zoo time series object
#oneSeg.n <- zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
ccf(oneSeg.n$speed, twoSeg.n$speed)
# test for stationarity
acf(oneSeg.n$speed)
pacf(oneSeg.n$speed)
Box.test(oneSeg.n$speed, lag=10)
Box.test(oneSeg.n$speed, lag=1)
Box.test(oneSeg.n$speed, lag=15)
Box.test(oneSeg.n$speed, lag=150)
Box.test(oneSeg.n$speed, lag=2)
Box.test(oneSeg.n$speed, lag=2, type='Ljung-Box')
xyplot(speed~tstamp, oneSeg.n, type='l')
line(oneSeg.n$tstamp, median(oneSeg.n$speed))
Box.test(oneSeg.n$speed, type='Ljung-Box')
Box.test(oneSeg.n$speed, lag=seq(0,25,1), type='Ljung-Box')
Box.test(oneSeg.n$speed, lag=2, type='Ljung-Box')
Box.test(oneSeg.n$speed, lag=0, type='Ljung-Box')
Box.test(oneSeg.n$speed, lag=1, type='Ljung-Box')
# convert to a zoo time series object
oneSeg.n <- zoo(oneSeg.n, order.by=oneSeg.n$tstamp)
autoplot.zoo(oneSeg.n$speed)
?autoplot.zoo
autoplot.zoo(oneSeg.n$speed, n=20)
autoplot.zoo(oneSeg.n$speed, n=1)
frequency(oneSeg.n$speed)
# look at 15 minute data
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
# convert to a zoo time series object
frequency(oneSeg.n)
# convert to a zoo time series object
frequency(oneSeg.n$tstamp)
ccf(oneSeg.n$speed, twoSeg.n$speed)
oneSeg.n <- traffic15.n[which(position==250),] # Should be between Indy and Lafayette
twoSeg.n <- traffic15.n[which(position==251),]
ccf(oneSeg.n$speed, twoSeg.n$speed)
?ccf
ccf(oneSeg.n$speed, twoSeg.n$speed, type='covariance')
ccf(oneSeg.n$speed, twoSeg.n$speed, type='correlation')
ccf(twoSeg.n$speed, oneSeg.n$speed, type='correlation')
install.packages(tseries)
install.packages('tseries')
library(tseries)
##### Stationarity #####
adf.test(traffic15.n$speed)
traffic15.n[which(position==250), speed]
tmp <- traffic15.n[which(position==250), speed]
##### Stationarity #####
adf.test(traffic15.n[which(position==250), speed])
##### Stationarity #####
tmp <- adf.test(traffic15.n[which(position==250), speed])
View(tmp)
plot(tmp)
summary(tmp)
tmp
##### Stationarity #####
tmp <- adf.test(traffic15.n[which(position==2), speed])
tmp
tmp$statistic
data.frame(tmp)
as.data.frame(tmp)
tmp$parameter
tmp <- adf.test(traffic15.n[which(position==2), speed], k=0)
adf.test(traffic15.n[which(position==2), speed], k=0)
adf.test(traffic15.n[which(position==2), speed], k=1)
adf.test(traffic15.n[which(position==2), speed], k=2)
adf.test(traffic15.n[which(position==2), speed], k=3)
adf.test(traffic15.n[which(position==2), speed], k=4)
adf.test(traffic15.n[which(position==2), speed], k=15)
adf.test(traffic15.n[which(position==2), speed], k=18)
adf.test(traffic15.n[which(position==2), speed], k=30)
adf.test(traffic15.n[which(position==2), speed], k=100)
adf.test(traffic15.n[which(position==2), speed])
?adf.test
adf.test(traffic15.n[which(position==2), speed], alternative='explosive')
kpss.test(traffic15.n[which(position==2), speed])
pp.test(traffic15.n[which(position==2), speed])
##### Stationarity #####
# kpss isn't a good choice. there is no trend to test against.
kpss.test(traffic15.n[which(position==2), speed])
adf.test(traffic15.n[which(position==2), speed], alternative='explosive')
adf.test(traffic15.n[which(position==2), speed])
pp.test(traffic15.n[which(position==2), speed])
##### Stationarity #####
kpss.test(traffic15.n[which(position==250), speed])
adf.test(traffic15.n[which(position==250), speed])
pp.test(traffic15.n[which(position==250), speed])
for (i in unique(traffic15.n$position)){
print(i)
}
adf.stats <- data.frame()
adf.stats(rbind(c('one'=1)))
adf.stats <- data.frame()
adf.stats <- rbind(adf.stats,c('one'=1))
View(adf.stats)
View(adf.stats)
adf.stats <- rbind(adf.stats,c(1, 2, 3, 5))
View(adf.stats)
adf.stats <- data.frame()
adf.stats <- rbind(adf.stats,c(1, 2, 3, 5))
View(adf.stats)
adf.stats <- data.frame()
adf.stats <- data.frame()
for (i in unique(traffic15.n$position)){
i = as.numeric(i)
tmp <- adf.test(traffic15.n[which(position==i), speed])
adf.stats <- rbind(adf.stats,c(i, tmp$statistic, tmp$parameter, tmp$alternative, tmp$p.value,
tmp$method, tmp$data.name))
}
colnames(adf.stats) <- c('position','statistic','parameter','alternative','p.value','method','data.name')
View(adf.stats)
print(traffic15.n[which(position==i), speed])
i
head(unique(traffic15.n$position))
min(unique(traffic15.n$position))
for (i in unique(as.numeric(traffic15.n$position)){
i = as.numeric(i)
print(traffic15.n[which(position==i), speed])
#tmp <- adf.test(traffic15.n[which(position==i), speed])
#adf.stats <- rbind(adf.stats,c(i, tmp$statistic, tmp$parameter, tmp$alternative, tmp$p.value,
tmp$method, tmp$data.name))
}
unique(as.numeric(traffic15.n$position))
for (i in unique(as.numeric(traffic15.n$position))){
print(traffic15.n[which(position==i), speed])
tmp <- adf.test(traffic15.n[which(position==i), speed])
adf.stats <- rbind(adf.stats,c(i, tmp$statistic, tmp$parameter, tmp$alternative, tmp$p.value,
tmp$method, tmp$data.name))
}
adf.stats <- data.frame()
for (i in unique(as.numeric(traffic15.n$position))){
tmp <- adf.test(traffic15.n[which(position==i), speed])
adf.stats <- rbind(adf.stats,c(i, tmp$statistic, tmp$parameter, tmp$alternative, tmp$p.value,
tmp$method, tmp$data.name))
}
View(adf.stats)
for (i in unique(as.numeric(traffic15.n$position))){
adf.test(traffic15.n[which(position==i), speed])
#
# tmp <- adf.test(traffic15.n[which(position==i), speed])
# adf.stats <- rbind(adf.stats,c(i, tmp$statistic, tmp$parameter, tmp$alternative, tmp$p.value,
#                                tmp$method, tmp$data.name))
}
warnings
warnings()
tmp <- traffic15.n %>% group_by('position') %>% adf.test('speed')
tmp <- traffic15.n %>% group_by(position) %>% adf.test(speed)
unique(as.numeric(traffic15.n$position))
unique(as.numeric(traffic15.n$position))[80]
adf.test(traffic15.n[which(position==219), speed])
traffic15.n[which(position==219)
xyplot(speed~tstamp, data=traffic15.n[which(position==219),])
traffic15.n[which(position==219),]
View(traffic15.n)
unique(as.numeric(traffic15.n$position))[80]
unique(as.numeric(traffic15.n$position))[79]
traffic[which(position==unique(as.numeric(traffic15.n$position))[80]),]
tmp <- traffic[which(position==unique(as.numeric(traffic15.n$position))[80]),]
View(tmp)
traffic15.n[which(position==219),]
tmp$position[1]
class(tmp$position[1])
traffic[which(position==219),]
traffic15.n
traffic15.n(which(position=='219'),)
traffic15.n[which(position=='219'),]
levels(traffic15.n)
levels(traffic15.n$position)
traffic.n[which(position==219),]
traffic[which(position==219),]
View(adf.stats)
traffic15.n[which(position='219'),]
traffic15.n[which(position=='219'),]
xyplot(speed~tstamp, data=traffic[which(position==219),],type='l')
tmp <- traffic[which(position==219),]
View(tmp)
View(tmp)
tm_shape(uniqueSegs.n) + tm_dots('position', style='cont')
uniqueSegs.n <- traffic.n[,c('xdid','position','lat','lon')] %>% unique %>%
st_as_sf(coords=c('lon','lat'))
tm_shape(uniqueSegs.n) + tm_dots('position', style='cont')
# split data into north and south bound sets
traffic.n <- traffic[which(direction=='N'),]
traffic.n <- traffic.n[order(tstamp),]
traffic.n$position <- as.factor(traffic.n$position)
# set the ordering for the position
summary(traffic.n$position)
uniqueSegs.n <- traffic.n[,c('xdid','position','lat','lon')] %>% unique %>%
st_as_sf(coords=c('lon','lat'))
tm_shape(uniqueSegs.n) + tm_dots('position', style='cont')
library(data.table)
library(sf)
library(tmap); tmap_mode('view')
library(mapview)
library(dplyr)
library(tidyr)
library(lattice)
library(zoo)
library(tseries)
##### Load the Data & Prep #####
fpath <- 'C:/Users/Downi/Desktop/June2018_I65_SpeedData.csv'
traffic <- fread(fpath,col.names=c('xdid', 'tstamp', 'speed', 'score', 'lat', 'lon', 'position',
'roadname', 'direction', 'bearing', 'startmm', 'endmm'))
install.packages(c('tidyverse', 'data.table', 'sf', 'tmap', 'rgdal', 'zoo', 'xts', 'forecast', 'tseries', 'fable', 'tsibble', 'feasts'))
