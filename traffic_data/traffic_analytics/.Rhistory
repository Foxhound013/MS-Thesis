main='Medium Confidence Segment by Instances for all XDID')
barchart(count~hour, data=mConfHour.count,
main='Medium Confidence Segment by Instances for all XDID', xlab='Hour',
ylab='Frequency')
png('./figures/mConf_ByHourofDay.png')
barchart(count~hour, data=mConfHour.count,
main='Medium Confidence Segment by Instances for all XDID', xlab='Hour',
ylab='Frequency')
dev.off()
library(lattice)
library(dplyr)
library(tidyr)
library(sf)
library(tmap); tmap_mode('view');
library(RColorBrewer)
library(data.table)
fpath <- 'C:/Users/Downi/Desktop/2018-04-25_I65_May.csv' # can't read from G-drive, causes issues
traffic <- fread(input=fpath)
# fix up the data
traffic$tstamp <- as.POSIXct(traffic$tstamp, tz='UTC')
#traffic <- complete(traffic, xdid, tstamp) # Complete may not be feasible for much larger data . . .
# 39,283,200 obs before complete
# 39,283,200 obs after complete
# i.e. no missing data! :D But how many for each confidence bin?
traffic <- setDT(traffic)
# How many segments are there in total
totalSegs <- length(unique(traffic$xdid))
# segment t series by confidence level
hConf <- traffic[which(score==30),]
mConf <- traffic[which(score==20),]
lConf <- traffic[which(score==10),]
# what do the speeds look like
mConf.avgSpd <- mConf[,mean('speed'), by=c('xdid')]
# what do the speeds look like
mConf.avgSpd <- mConf[,mean(speed), by=c('xdid')]
View(mConf.avgSpd)
summary(mCmConf.avgSpd)
summary(mConf.avgSpd)
# Does a random sample of the medium traffic speeds look comparable to that of the high?
mConf.groups <- mConf[,speed, by=c('xdid', 'tstamp')]
View(mConf.groups)
xyplot(speed~tstamp | factor(xdid), data=mConf.groups, layout=c(1,6,1))
xyplot(speed~tstamp | factor(xdid), data=mConf.groups, type='l', layout=c(1,6,1))
xyplot(speed~tstamp | factor(xdid), data=mConf.groups, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1))
xyplot(speed~tstamp | factor(xdid), data=mConf.groups, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1), ylim=seq(0,70,10))
pdf('./figures/mConf_Tseries.pdf')
xyplot(speed~tstamp | factor(xdid), data=mConf.groups, type='l', pch=16, col='deepskyblue3',
layout=c(1,6), ylim=seq(0,70,10))
dev.off()
xyplot(speed~tstamp | factor(xdid), data=hConf, type='l', pch=16, col='deepskyblue3',
latout=c(1,6,1), ylim=seq(0,70,10))
View(lConf)
# there is too much data to straight out plot it, cut the t series in half and visualize that first
hCnf1 <- hConf[tstamp >= '2018-05-01' & tstamp < '2018-05-16']
rm(hCnf1)
# there is too much data to straight out plot it, cut the t series in half and visualize that first
hConf1 <- hConf[tstamp >= '2018-05-01' & tstamp < '2018-05-16']
head(hConf1)
xyplot(speed~tstamp | factor(xdid), data=hConf1, type='l', pch=16, col='deepskyblue3',
latout=c(1,6,1), ylim=seq(0,70,10))
# there is too much data to straight out plot it, cut the t series down
hConf1 <- hConf[tstamp >= '2018-05-01' & tstamp < '2018-05-08']
xyplot(speed~tstamp | factor(xdid), data=hConf1, type='l', pch=16, col='deepskyblue3',
latout=c(1,6,1), ylim=seq(0,70,10))
# there is too much data to straight out plot it, cut the t series down
hConf1 <- hConf[tstamp >= '2018-05-01' & tstamp < '2018-05-03']
xyplot(speed~tstamp | factor(xdid), data=hConf1, type='l', pch=16, col='deepskyblue3',
latout=c(1,6,1), ylim=seq(0,70,10))
# there is too much data to straight out plot it, cut the t series down
hConf1 <- hConf[tstamp >= '2018-05-01' & tstamp < '2018-05-01']
xyplot(speed~tstamp | factor(xdid), data=hConf1, type='l', pch=16, col='deepskyblue3',
latout=c(1,6,1), ylim=seq(0,70,10))
# there is too much data to straight out plot it, cut the t series down
hConf1 <- hConf[tstamp >= '2018-05-01' & tstamp < '2018-05-02']
xyplot(speed~tstamp | factor(xdid), data=hConf1, type='l', pch=16, col='deepskyblue3',
latout=c(1,6,1), ylim=seq(0,70,10))
# there is too much data to straight out plot it, cut the t series down
hConf1 <- hConf[tstamp >= '2018-05-01' & tstamp < '2018-05-02']
xyplot(speed~tstamp | factor(xdid), data=hConf1, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1), ylim=seq(0,70,10))
xyplot(speed~tstamp | factor(xdid), data=hConf, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1), ylim=seq(0,70,10))
# there is too much data to straight out plot it, cut the t series down
hConf1 <- hConf[tstamp >= '2018-05-01' & tstamp < '2018-05-08']
xyplot(speed~tstamp | factor(xdid), data=hConf1, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1), ylim=seq(0,70,10))
library(lattice)
library(dplyr)
library(tidyr)
library(sf)
library(tmap)
library(RColorBrewer)
fpath <- 'C:/Users/Downi/Google Drive/Research/Thesis/traffic_data/2018-04-25_I65.csv'
traffic <- read.csv(fpath, header=F, stringsAsFactors=F,
col.names=c('version', 'xdid', 'tstamp',
'speed', 'roadNumber', 'roadName', 'county', 'miles', 'lat', 'lon',
'bearing', 'district', 'subdistrict', 'prevXdid', 'nextXdid'))
library(lattice)
library(dplyr)
library(tidyr)
library(sf)
library(tmap); tmap_mode('view');
library(RColorBrewer)
library(data.table)
# library(zoo)
fpath <- 'C:/Users/Downi/Desktop/2018-04-25_I65_May.csv' # can't read from G-drive, causes issues
traffic <- fread(input=fpath)
# fix up the data
traffic$tstamp <- as.POSIXct(traffic$tstamp, tz='UTC')
#traffic <- complete(traffic, xdid, tstamp) # Complete may not be feasible for much larger data . . .
# 39,283,200 obs before complete
# 39,283,200 obs after complete
# i.e. no missing data! :D But how many for each confidence bin?
traffic <- setDT(traffic)
##### Smoothing the data #####
# start with a toy (small) example
xdid.unique <- unique(traffic[,'xdid'])
xdid.rand <- traffic[sample(nrow(xdid.unique), size = 1, replace=F),'xdid']
toy <- merge(traffic, xdid.rand)
toy$tstamp <- as.integer(toy$tstamp)
toy.loess <- loess(speed~tstamp | factor(xdid), data=toy)
start <- Sys.time()
toy.loess <- loess(speed~tstamp, data=toy)
end <- Sys.time(); end-start
plot(toy.loess)
lines(toy.loess)
pdf('./figures/toyLoess.pdf', width=16)
lines(toy.loess)
dev.off()
plot(toy.loess, type='l')
pdf('./figures/toyLoess.pdf', width=16)
plot(toy.loess, type='l')
dev.off()
?loess
start <- Sys.time()
toy.loess <- loess(speed~tstamp, data=toy, span=2) # roughly 20 seconds
end <- Sys.time(); end-start
plot(toy.loess, type='l')
start <- Sys.time()
toy.loess <- loess(speed~tstamp, data=toy, span=100) # roughly 20 seconds
end <- Sys.time(); end-start
plot(toy.loess, type='l')
start <- Sys.time()
toy.loess <- loess(speed~tstamp, data=toy) # roughly 20 seconds
end <- Sys.time(); end-start
plot(toy.loess, type='l')
tmp <- seq(ymd_hm('2018-05-01 00:00:00'),ymd_hm('2018-06-01 00:00:00'), by = '15 mins')
tmp <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-06-01 00:00:00'), by = '15 mins')
tail(tmp)
tmp <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-05-31 23:59:00'), by = '15 mins')
tail(tmp)
newTimes <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-05-31 23:59:00'), by = '15 mins')
?predict
predict(toy.loess, data.frame(newTimes))
plot(toy.loess, type='l')
predict(toy.loess, data.frame(tstamp=newTimes))
tmp <- predict(toy.loess, data.frame(tstamp=newTimes))
newTimes <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-05-31 23:59:00'), by = '15 mins') %>% as.integer
tmp <- predict(toy.loess, data.frame(tstamp=newTimes))
plot(tmp)
plot(newTimes, tmp)
plot(as.POSIXct(newTimes), tmp)
newTimes <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-05-01 23:59:00'), by = '15 mins') %>% as.integer
tmp <- predict(toy.loess, data.frame(tstamp=newTimes))
plot(newTimes, tmp)
tmp <- predict(toy.loess, data.frame(tstamp=newTimes), se=TRUE)
tmp <- predict(toy.loess, data.frame(tstamp=newTimes), se=TRUE)
tmp <- predict(toy.loess, data.frame(tstamp=newTimes), se=FALSE)
plot(newTimes, tmp)
?predict
toy.loess <- loess(speed~tstamp, data=toy) # roughly 20 seconds
newTimes <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-05-01 23:59:00'), by = '15 mins') %>% as.integer
tmp <- predict(toy.loess, data.frame(tstamp=newTimes), se=FALSE)
plot(newTimes, tmp)
plot(toy$tstamp, toy$speed)
plot(toy$tstamp, toy$speed, type='l', cex=.5)
lines(toy.loess)
lines(toy.loess, col='red')
start <- Sys.time()
toy.loess <- loess(speed~tstamp, data=toy, span=0.1) # roughly 20 seconds
end <- Sys.time(); end-start
plot(toy.loess, type='l')
View(toy)
toy <- merge(traffic, xdid.rand)
newTimes <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-05-01 23:59:00'), by = '15 mins') %>% as.integer
tmp <- predict(toy.loess, data.frame(tstamp=newTimes), se=FALSE)
plot(toy$tstamp, toy$speed, type='l', cex=.5)
lines(toy.loess, col='red')
lines(tmp, col='red')
plot(toy$tstamp, toy$speed, type='l', cex=.5)
lines(tmp, col='red')
toy.sub <- subset(toy, tstamp>=as.POSIXct('2018-05-01 00:00:00') & tstamp < '2018-05-01 00:00:00')
View(toy)
toy.sub <- subset(toy, tstamp>=as.POSIXct('2018-05-01 00:00:00') & tstamp < '2018-05-02 00:00:00')
plot(toy.sub$tstamp, toy.sub$speed)
plot(toy.sub$tstamp, toy.sub$speed, type='l')
toy$tstamp <- as.integer(toy$tstamp)
toy.loess <- loess(speed~tstamp, data=toy, span=0.1) # roughly 20 seconds
newTimes <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-05-01 23:59:00'), by = '15 mins') %>% as.integer
tmp <- predict(toy.loess, data.frame(tstamp=newTimes), se=FALSE)
plot(toy.sub$tstamp, toy.sub$speed, type='l', cex=.5)
lines(tmp, col='red')
plot(as.integer(toy.sub$tstamp), toy.sub$speed, type='l', cex=.5)
lines(tmp, col='red')
toy.loess$fitted
plot(toy.loess$fitted)
lines(toy.loess$fitted, col='red')
plot(as.integer(toy.sub$tstamp), toy.sub$speed, type='l', cex=.5)
lines(toy.loess$fitted, col='red')
lines(toy.loess, col='red')
arima(toy.sub)
arima(toy.sub[,c('tstamp','speed')])
arima(toy.sub[,c('speed')])
plot(toy.sub[,c('speed')])
plot(as.integer(toy.sub$tstamp), toy.sub$speed, type='l', cex=.5)
lines(toy.loess$fitted, col='red')
lines(as.integer(toy.sub$tstamp), toy.loess$fitted, col='red')
plot(toy.loess$fitted)
lines(as.integer(toy.sub$tstamp), toy.loess$fitted, col='red')
toy.loess <- loess(speed~tstamp, data=toy, span=0.1) # roughly 20 seconds
lines(as.integer(toy$tstamp), toy.loess$fitted, col='red')
plot(as.integer(toy$tstamp), toy.sub$speed, type='l', cex=.5)
plot(as.integer(toy$tstamp), toy$speed, type='l', cex=.5)
lines(as.integer(toy$tstamp), toy.loess$fitted, col='red')
toy.loess <- loess(speed~tstamp, data=toy, span=0.05) # roughly 20 seconds
newTimes <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-05-01 23:59:00'), by = '15 mins') %>% as.integer
tmp <- predict(toy.loess, data.frame(tstamp=newTimes), se=FALSE)
plot(as.integer(toy$tstamp), toy$speed, type='l', cex=.5)
lines(as.integer(toy$tstamp), toy.loess$fitted, col='red')
toy.loess <- loess(speed~tstamp, data=toy, span=0.02) # roughly 20 seconds
newTimes <- seq(as.POSIXct('2018-05-01 00:00:00'),as.POSIXct('2018-05-01 23:59:00'), by = '15 mins') %>% as.integer
tmp <- predict(toy.loess, data.frame(tstamp=newTimes), se=FALSE)
plot(as.integer(toy$tstamp), toy$speed, type='l', cex=.5)
lines(as.integer(toy$tstamp), toy.loess$fitted, col='red')
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy[,,by=c('xdid','tstamp')]
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy[,cut(tstamp, breaks='15 min'),by]
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy[,cut('tstamp', breaks='15 min'),by]
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy[,cut('tstamp', breaks='15 min'),by='xdid']
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy[,cut(tstamp, breaks='15 min'),by='xdid']
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy[,cut(tstamp, breaks='15 min'),by=c('xdid', 'tstamp')]
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- cut(toy$tstamp, breaks='15 min')
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
toy <- merge(traffic, xdid.rand)
tmp <- cut(toy$tstamp, breaks='15 min')
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy[,cut(tstamp, breaks='15 min'),by=c('xdid', 'tstamp')]
View(tmp)
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy[,speed,by=c('xdid', 'tstamp')]
View(tmp)
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy[,speed,by=c('xdid', 'tstamp')] %>% summarize(mean(speed))
View(tmp)
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy %>% group_by('xdid','tsamp')
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy %>% group_by('xdid',tstamp=cut('tstamp',breaks='15 min')) %>% summarise(avgSpeed=mean(speed))
# Loess examples have been kept above for potential future use, but 15 min. bins will be explored
tmp <- toy %>% group_by(xdid,tstamp=cut(tstamp,breaks='15 min')) %>% summarise(avgSpeed=mean(speed))
View(tmp)
plot(tmp$tstamp, tmp$avgSpeed)
plot(tmp$tstamp, tmp$avgSpeed, type='l')
plot(tmp$tstamp, tmp$avgSpeed, type='l')
View(tmp)
plot(tmp$tstamp, tmp$avgSpeed, type='l')
lines(tmp$tstamp, tmp$avgSpeed)
# try this for the whole dataset, can it be done reasonably?
traffic.sub <- traffic %>% group_by(xdid,tstamp=cut(tstamp,breaks='15 min'))  %>% summarise(avgSpeed=mean(speed))
library(lattice)
library(dplyr)
library(tidyr)
library(sf)
library(tmap); tmap_mode('view');
library(RColorBrewer)
library(data.table)
fpath <- 'C:/Users/Downi/Desktop/2018-04-25_I65_May.csv' # can't read from G-drive, causes issues
traffic <- fread(input=fpath)
# fix up the data
traffic$tstamp <- as.POSIXct(traffic$tstamp, tz='UTC')
#traffic <- complete(traffic, xdid, tstamp) # Complete may not be feasible for much larger data . . .
# 39,283,200 obs before complete
# 39,283,200 obs after complete
# i.e. no missing data! :D But how many for each confidence bin?
traffic <- setDT(traffic)
# How many segments are there in total
totalSegs <- length(unique(traffic$xdid))
# segment t series by confidence level
hConf <- traffic[which(score==30),]
mConf <- traffic[which(score==20),]
lConf <- traffic[which(score==10),]
length(hConf$xdid)/length(traffic$xdid)
length(mConf$xdid)/length(traffic$xdid)
length(lConf$xdid)/length(traffic$xdid)
# try this for the whole dataset, can it be done reasonably?
traffic.sub <- traffic %>% group_by(xdid,tstamp=cut(tstamp,breaks='15 min'))  %>% summarise(avgSpeed=mean(speed))
xyplot(avgSpeed~tstamp | factor(xdid), data=traffic.sub, layout=c(1,6,1))
traffic.sub$tstamp <- as.POSIXct(traffic.sub$tstamp)
xyplot(avgSpeed~tstamp | factor(xdid), data=traffic.sub, type='l', layout=c(1,6,1))
glimpse(traffic.sub)
?cut
traffic.1 <- traffic.sub[which(xdid=='138360227'),]
traffic.1 <- traffic.sub[which(traffic.sub$xdid=='138360227'),]
xyplot(avgSpeed~tstamp, data=traffic.1, type='l')
?arima
acf(traffic.1)
bwplot(avgSpeed | factor(xdid), data=traffic.sub, layout=c(1,1,1))
bwplot(~avgSpeed | factor(xdid), data=traffic.sub, layout=c(1,1,1))
bwplot(avgSpeed~tstamp | factor(xdid), data=traffic.sub, layout=c(1,1,1))
bwplot(avgSpeed~tstamp | factor(xdid), data=traffic.1, layout=c(1,1,1))
bwplot(~avgSpeed | factor(xdid), data=traffic.1, layout=c(1,1,1))
bwplot(~avgSpeed | factor(xdid), data=traffic.sub, layout=c(1,1,1))
library(data.table)
library(sf)
library(tmap)
library(mapview)
library(dplyr)
library(tidyr)
library(lattice)
fpath <- 'C:/Users/Downi/Desktop/June2018_I65_SpeedData.csv'
traffic <- fread(fpath,col.names=c('xdid', 'tstamp', 'speed', 'score', 'lat', 'lon', 'position',
'roadname', 'direction', 'bearing', 'startmm', 'endmm'))
glimpse(traffic)
uniqueSegs <- traffic[,c('xdid','lon','lat')] %>% unique %>% st_as_sf(coords=c('lon','lat'))
#tmap_mode('view')
#tm_shape(uniqueSegs) + tm_dots()
# fix up the data
traffic$tstamp <- as.POSIXct(traffic$tstamp, tz='UTC')
#traffic <- complete(traffic, xdid, tstamp) # not necessary
# before complete: 39,830,400
# after complete: 39,830,400
traffic <- setDT(traffic)
# segment t series by confidence level
hConf <- traffic[which(score==30),]
mConf <- traffic[which(score==20),]
lConf <- traffic[which(score==10),]
length(hConf$xdid)/length(traffic$xdid)
length(mConf$xdid)/length(traffic$xdid)
length(lConf$xdid)/length(traffic$xdid)
# isolate the time series data for completing the subsets
tSeries <- traffic[,c('xdid','tstamp')]
# complete the data set
mConf.complete <- left_join(tSeries, mConf, by=c('xdid','tstamp'))
pdf('./figures/mConf_Tseries.pdf')
xyplot(speed~tstamp | factor(xdid), data=mConf.complete, type='l', pch=16, col='deepskyblue3',
layout=c(1,6), ylim=seq(0,70,10))
dev.off()
unique(mConf$xdid)
length(unique(mConf$xdid))
length(unique(hConf$xdid))
uniqueSegs.n <- traffic[,c('xdid','position','latitude','longitude')]
library(data.table)
library(sf)
library(tmap)
library(mapview)
library(dplyr)
library(tidyr)
library(lattice)
fpath <- 'C:/Users/Downi/Desktop/June2018_I65_SpeedData.csv'
traffic <- fread(fpath,col.names=c('xdid', 'tstamp', 'speed', 'score', 'lat', 'lon', 'position',
'roadname', 'direction', 'bearing', 'startmm', 'endmm'))
glimpse(traffic)
uniqueSegs <- traffic[,c('xdid','position','lon','lat')] %>% unique %>% st_as_sf(coords=c('lon','lat'))
#tmap_mode('view')
#tm_shape(uniqueSegs) + tm_dots()
# fix up the data
traffic$tstamp <- as.POSIXct(traffic$tstamp, tz='UTC')
traffic <- setDT(traffic)
# split data into north and south bound sets
traffic.n <- traffic[which(direction=='N'),]
traffic.s <- traffic[which(direction=='S'),]
uniqueSegs.n <- traffic[,c('xdid','position','latitude','longitude')]
uniqueSegs.n <- traffic[,c('xdid','position','lat','lon')]
uniqueSegs.n <- traffic[,c('xdid','position','lat','lon')] %>% unique %>% st_as_sf(coords=c('lon','lat'))
uniqueSegs.n <- traffic.n[,c('xdid','position','lat','lon')] %>% unique %>%
st_as_sf(coords=c('lon','lat'))
View(uniqueSegs.n)
plot(uniqueSegs.n,axes=T)
tmap_shape(uniqueSegs.n) + tm_dots('position')
tm_shape(uniqueSegs.n) + tm_dots('position')
library(tmap); tmap_mode('view')
tm_shape(uniqueSegs.n) + tm_dots('position')
tm_shape(uniqueSegs.n) + tm_symbols('position')
tm_shape(uniqueSegs.n) + tm_symbols(col='position')
tm_shape(uniqueSegs.n) + tm_dots(col='position')
tm_symbols
tm_shape(uniqueSegs.n) + tm_symbols(col='position')
?tm_dots
tm_shape(uniqueSegs.n) + tm_dots('position', style='cont')
# plot the data as a time series and order panels by position number
toy <- traffic.n[seq(1,10000),]
View(toy)
levels(toy$position)
toy$position <- as.factor(toy$position)
levels(toy$position)
xyplot(speed~tstamp | factor(xdid), data=toy)
xyplot(speed~tstamp | factor(xdid), data=toy, layout=c(1,6,1))
xyplot(speed~tstamp | factor(xdid), data=toy, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1), ylim=seq(0,70,10))
xyplot(speed~tstamp | factor(xdid), data=toy, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1), ylim=seq(0,90,10))
xyplot(speed~tstamp | factor(xdid), data=toy, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,5))))
xyplot(speed~tstamp | factor(xdid), data=toy, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
View(toy)
xyplot(speed~tstamp | factor(xdid), data=toy, type='l', pch=16, col='deepskyblue3',
layout=c(1,3,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
# plot the data as a time series and order panels by position number
toy <- traffic.n[seq(1,100000),]
toy$position <- as.factor(toy$position)
xyplot(speed~tstamp | factor(xdid), data=toy, type='l', pch=16, col='deepskyblue3',
layout=c(1,3,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
xyplot(speed~tstamp | factor(position), data=toy, type='l', pch=16, col='deepskyblue3',
layout=c(1,3,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
xyplot(speed~tstamp | factor(position), data=toy, type='l', pch=16, col='deepskyblue3',
layout=c(1,6,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
xyplot(speed~tstamp | factor(position), data=toy, type='l', pch=16, col='deepskyblue3',
layout=c(1,3,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
View(toy)
toy2 <- toy[which(xdid=='1363496127')]
View(toy2)
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(1,3,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
xyplot(speed~tstamp | factor(position), data=toy, pch=16, col='deepskyblue3',
layout=c(1,3,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
toy <- toy[order(tstamp),]
View(toy)
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(1,3,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
levels(toy$position)
-levels(toy$position)
rev(levels(toy$position))
levels(toy$position) <- rev(levels(toy$position))
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(1,3,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
# plot the data as a time series and order panels by position number
toy <- traffic.n[seq(1,100000),]
toy <- toy[order(tstamp),]
toy$position <- as.factor(toy$position)
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(1,3,1), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(1,3,2), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
levels(toy$position) <- rev(levels(toy$position))
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(1,3,2), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(3,1,2), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
toy <- traffic.n[seq(1,100000),]
toy <- toy[order(tstamp),]
toy$position <- as.factor(toy$position)
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(3,1,2), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(1,3,2), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
pdf('./figures/tmp.pdf')
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(1,6,10), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
dev.off()
xyplot(speed~tstamp | factor(position), data=toy, type='l', col='deepskyblue3',
layout=c(1,6,10), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
xyplot(speed~tstamp | factor(position, levels=seq(1,length(unique(position)),6),
xyplot(speed~tstamp | factor(position, levels=seq(1,length(unique(position)),6)),
data=toy, type='l', col='deepskyblue3',
layout=c(1,6,10), ylim=c(0,90), scales=list(y=list(at=seq(0,90,10))))
xyplot(speed~tstamp | factor(position, levels=seq(1,length(unique(position)),6)),
data=toy, type='l', col='deepskyblue3',
layout=c(1,6,10), ylim=c(0,90), scales=list(y=list(at=seq(0,90,15))))
pdf('./figures/tmp.pdf')
xyplot(speed~tstamp | factor(position, levels=seq(1,length(unique(position)),6)),
data=toy, type='l', col='deepskyblue3',
layout=c(1,6,2), ylim=c(0,90), scales=list(y=list(at=seq(0,90,15))))
pdf('./figures/tmp.pdf')
xyplot(speed~tstamp | factor(position, levels=seq(1,length(unique(position)),6)),
data=toy, type='l', col='deepskyblue3',
layout=c(1,6,2), ylim=c(0,90), scales=list(y=list(at=seq(0,90,15))))
dev.off()
View(traffic.n)
head(traffic.n)
traffic.n <- traffic[which(direction=='N'),]
traffic.n <- traffic.n[order(tstamp),]
traffic.s <- traffic[which(direction=='S'),]
traffic.s <- traffic.s[order(tstamp),]
traffic.n <- traffic[which(direction=='N'),]
traffic.n <- traffic.n[order(tstamp),]
traffic.n$position <- as.factor(traffic.n$position)
traffic.s <- traffic[which(direction=='S'),]
traffic.s <- traffic.s[order(tstamp),]
traffic.s$position <- as.factor(traffic.s$position)
start <- Sys.time()
pdf('./figures/orderedSegments_N_Tseries.pdf')
xyplot(speed~tstamp | factor(position), data=traffic.n, type='l', col='deepskyblue3',
layout=c(1,6), ylim=c(0,90), scales=list(y=list(at=seq(0,90,15))))
dev.off()
end <- Sys.time()
end-start
start <- Sys.time()
pdf('./figures/orderedSegments_N_Tseries.pdf', width=16)
xyplot(speed~tstamp | factor(position), data=traffic.n, type='l', col='deepskyblue3',
layout=c(1,6), ylim=c(0,90), scales=list(y=list(at=seq(0,90,15))))
dev.off()
end <- Sys.time()
end-start
